// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// NetflowEndpoint netflow endpoint
// swagger:model NetflowEndpoint
type NetflowEndpoint struct {

	// IP
	// Read Only: true
	IP string `json:"IP,omitempty"`

	// dns
	// Read Only: true
	DNS string `json:"dns,omitempty"`

	// last seen
	// Read Only: true
	LastSeen int64 `json:"lastSeen,omitempty"`

	// percent usage
	// Read Only: true
	PercentUsage float64 `json:"percentUsage,omitempty"`

	// type
	// Read Only: true
	Type string `json:"type,omitempty"`

	// usage
	// Read Only: true
	Usage float64 `json:"usage,omitempty"`
}

// DataType gets the data type of this subtype
func (m *NetflowEndpoint) DataType() string {
	return "endpoint"
}

// SetDataType sets the data type of this subtype
func (m *NetflowEndpoint) SetDataType(val string) {

}

// IP gets the IP of this subtype

// DNS gets the dns of this subtype

// LastSeen gets the last seen of this subtype

// PercentUsage gets the percent usage of this subtype

// Type gets the type of this subtype

// Usage gets the usage of this subtype

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *NetflowEndpoint) UnmarshalJSON(raw []byte) error {
	var data struct {

		// IP
		// Read Only: true
		IP string `json:"IP,omitempty"`

		// dns
		// Read Only: true
		DNS string `json:"dns,omitempty"`

		// last seen
		// Read Only: true
		LastSeen int64 `json:"lastSeen,omitempty"`

		// percent usage
		// Read Only: true
		PercentUsage float64 `json:"percentUsage,omitempty"`

		// type
		// Read Only: true
		Type string `json:"type,omitempty"`

		// usage
		// Read Only: true
		Usage float64 `json:"usage,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		DataType string `json:"dataType,omitempty"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result NetflowEndpoint

	if base.DataType != result.DataType() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid dataType value: %q", base.DataType)
	}

	result.IP = data.IP

	result.DNS = data.DNS

	result.LastSeen = data.LastSeen

	result.PercentUsage = data.PercentUsage

	result.Type = data.Type

	result.Usage = data.Usage

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m NetflowEndpoint) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// IP
		// Read Only: true
		IP string `json:"IP,omitempty"`

		// dns
		// Read Only: true
		DNS string `json:"dns,omitempty"`

		// last seen
		// Read Only: true
		LastSeen int64 `json:"lastSeen,omitempty"`

		// percent usage
		// Read Only: true
		PercentUsage float64 `json:"percentUsage,omitempty"`

		// type
		// Read Only: true
		Type string `json:"type,omitempty"`

		// usage
		// Read Only: true
		Usage float64 `json:"usage,omitempty"`
	}{

		IP: m.IP,

		DNS: m.DNS,

		LastSeen: m.LastSeen,

		PercentUsage: m.PercentUsage,

		Type: m.Type,

		Usage: m.Usage,
	},
	)
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		DataType string `json:"dataType,omitempty"`
	}{

		DataType: m.DataType(),
	},
	)
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this netflow endpoint
func (m *NetflowEndpoint) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *NetflowEndpoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetflowEndpoint) UnmarshalBinary(b []byte) error {
	var res NetflowEndpoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
